spring.application.name=transaction-service
server.port=8081
# --- Cloud PostgreSQL (NeonDB) Configuration ---
# Spring will automatically look for these environment variables.
# The value after the colon (:) is a default value, which is useful for local testing without Docker.
# We'll leave them blank here as Docker Compose will provide them.
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}


# JPA Properties
spring.jpa.hibernate.ddl-auto=${SPRING_JPA_HIBERNATE_DDL_AUTO}
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true

logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.web=DEBUG

jwt.secret.key=${JWT_SECRET_KEY}

# --- NEW: Kafka Consumer Configuration ---
# Tells this service where to find the Kafka broker.
# 'kafka:29092' works because the services are on the same Docker network.
spring.kafka.consumer.bootstrap-servers=${KAFKA_BROKER}
# A unique ID for this consumer group
spring.kafka.consumer.group-id=transaction-group
spring.kafka.consumer.auto-offset-reset=earliest

# Configure the key and value deserializers for JSON
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*

spring.kafka.consumer.properties.spring.json.value.default.type=com.expensetracker.transaction_service.dto.UserCreatedEvent
spring.kafka.consumer.properties.spring.json.type.mapping=com.expensetracker.user_service.dto.UserCreatedEvent:com.expensetracker.transaction_service.dto.UserCreatedEvent


