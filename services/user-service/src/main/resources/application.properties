spring.application.name=user-service
# This file can be used to override environment variables for local testing without docker-compose.
# For Docker, the configuration is passed via environment variables in docker-compose.yml.

# Server Port
server.port=8080

# --- Cloud PostgreSQL (NeonDB) Configuration ---
# Spring will automatically look for these environment variables.
# The value after the colon (:) is a default value, which is useful for local testing without Docker.
# We'll leave them blank here as Docker Compose will provide them.
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}


# JPA Properties
spring.jpa.hibernate.ddl-auto=${SPRING_JPA_HIBERNATE_DDL_AUTO}
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true

logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.web=DEBUG

jwt.secret.key=${JWT_SECRET_KEY}

# --- NEW: Kafka Producer Configuration ---
# Admin client configuration (for topic creation)
spring.kafka.bootstrap-servers=${KAFKA_BROKER}

# Tells this service where to find the Kafka broker.
spring.kafka.producer.bootstrap-servers=${KAFKA_BROKER}
# Configure the key and value serializers to handle strings and JSON objects
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer